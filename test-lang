#/
* lite uses 4 white-space indentation for scoping but can also be written without indentation.
* lite sees 2 white-spaces as end of line.
* object lifetime is always scope bound
* no aliasing
* parameters and assigments are always passed by value
* type data are stores as SOA
* lite is a small language that compiles to langs like wasm/js, C, Rust etc. It will ultimatly serve as a kindof lang interface.
* lite uses 2 memory areas. The first one is the static area where all types are stored as SOA. 
The second area is the dynamic area which serves as the function "stack".
/#



protocol Selectable:
    func hover_start: None
    func hover_end: None
    func select_start: None
    func select_end: None



type Vec3: [128]
    (x: f32)
    (y: f32)
    (z: f32)



type Entity: [1024]
    (id: f32)
    (x: f32)
    (y: f23)
    (z: f32)

    func check_entity_position: Vec3
        (entities: [Entity])  
        
        result: [3]Vec3
        
        loop entities:
                
        
        return



type Rgb: [1024]
    (r: f32)         
    (g: f32)         
    (b: f32)         
        


type Line: [1024]
    Selectable

    (color: Rgb)
    (start: Vec3)
    (end: Vec3)

    func hover_start: None
        pass
    func hover_end: None
        pass
    func select_start: None
        pass
    func select_end: None
        pass



some_array: [8]Point

loop some_array:
    if some_array[0] = 1:
        pass
    else if some_array[0] = 2:
        pass
    else:
        exit




line_0: Line(
Line.hover_start()
Line.hover_end()
