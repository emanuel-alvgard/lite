#/
* lite uses 4 white-space indentation for scoping but can also be written without indentation.
* lite sees 2 white-spaces as end of line.
* object lifetime is always scope bound
* no aliasing
* parameters and assigments are always passed by value
* type data are stores as SOA
/#

type Entity: [1024]
    i32: id
    f32: x
    f32: y
    f32: z


func check_entity_position:
    
    [Entity]: entities

    loop entities:
        


type Point: [128] #max amount of objects
    f32: x
    f32: y
    f32: z
    
type Line: [1024]
    Point: start
    Point: end

type Triangle: [256]
    Line: one
    Line: two
    Line: three

type Quad: [128]
    Triangle: bottom
    Triangle: top

type Cuboid: [128]
    Point: origin
    Quad: front
    Quad: back
    Quad: left
    Quad: right
    Quad: bottom
    Quad: top


func cuboid_create_by_width_height_origin:
    
    Point: origin
    Float: width
    Float: height

    point_0: Point(0, 0, 0)
    point_1: Point(1, 1, 1)
    
    line_0: Line(point0, point1)
    lint_1: Line()

    cube0: Cuboid()

    return cube0

some_array: [8]Point

loop some_array:
    if some_array[0] = 1:
        pass
    else if some_array[0] = 2:
        pass
    else:
        exit


func move_point_on_line:
    
move_point_on_line()
some_function(var_0)
some_function()
