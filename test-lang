#/
* lite uses 4 white-space indentation for scoping but can also be written without indentation.
* lite sees 2 white-spaces as end of line.
* object lifetime is always scope bound
* no aliasing
* parameters and assigments are always passed by value
* type data are stored as SOA
* lite is a small language that compiles to langs like wasm/js, C, Rust etc. It will ultimately serve as a kind of language interface.
* lite is completely stack based and all data is stored as SOA.
* variables can only be overwritten to a corresponding type. Variables containing an array can 
can only be overwritten by an array of the same type and size.  
/#

#/
* primitive data types/structures: i32,64, fl32,64, string, array. What types are avalible will vary with the underlying implementation. if type annotation is left
out the compiler will automatically infer the type to either i32, f32 or string.
/#

#compiler variables
MEMORY: '64MB'  #stack size
OPTIMIZATION: '1'


type Vector3:
    x: f32
    y: f32
    z: f32


type Selectable:

    color: Vector3

    func hover_start: None
        color: Vector3(100.0, 100.0, 100.0)
        return

    func hover_end: None
        return
    func select_start: None
        return
    func select_end: None
        return



type Entity:
    id: i32
    position: Vector3

type Line:
    
    {Selectable}
    
    id: string
    start: Vector3
    end: Vector3

    func {Selectable}.hover_start: None #Overriden
        pass
   

test_variable: 10.0     #this variable gets infered to a f32.

some_array: [128] Vec3

for i in some_array:
    if some_array[i] = 1:
        pass
    else if some_array[i] = 2:
        pass
    else:
        exit
        
        
 func get_position_of_entities: [] Vector3
        
        (entities: [] Entity)

        result: [entities] Vector3
        
        for i in entities:
            result[i]: enitities[i].position
        
        return result       


lines: [128] Line   #array contains 128 0-initialized Lines.

line_0: lines[0]    #indexed value gets copied in memory by the compiler.

line_0.start: Vec3(1.0, 1.0, 1.0)

lines[0]: line_0    #indexed value gets overwritten with line_0's value
lines[0].id: 'Test String'
