#/
* lite uses 4 white-space indentation for scoping but can also be written without indentation.
* lite sees 2 white-spaces as end of line.
* object lifetime is always scope bound
* no aliasing
* parameters and assignments are always passed by value
* type data are stored as SOA
* lite is a small language that compiles to langs like wasm/js, C, Rust etc. It will ultimately serve as a kind of language interface.
* lite is completely stack based and all data is stored as SOA.
* variables can only be overwritten to the same type. Variables containing an array can 
can only be overwritten by an array of the same type and size.  
* all type functions can be applied to an array of that type by default.
* arithmetic operators are +, -, *, /. These can also be used for operations on the to primitive data structures 
string and array. 
* comparison operators are =, >, <, !=, !>, !<.
/#

#/
* primitive data types/structures: i32,64, fl32,64, string, array. What types are avalible will vary with the underlying implementation. if type annotation is left
out the compiler will automatically infer the type to either i32, f32 or string.
/#

#compiler variables
MEMORY: '64MB'  #stack size
OPTIMIZATION: '1'

protocol Selectable:
    function hover_start:
    function hover_end:
    function select_start:
    function select_end:

type Vector3:
    x: f32
    y: f32
    z: f32

type Entity:
    id: i32
    position: Vector3

type Line:

    {Selectable}
    
    id: str
    start: Vector3
    end: Vector3

    function {Selectable}.hover_start:
        pass
   
#type inference of primitive types
variable_0: 1                           #i32
variable_1: 2500000                     #i64
variable_2: 1.0                         #f32
variable_3: 1.00000000                  #f64
variable_4: 'this is a string'          #str

num_array: [64000] f64 
num_array[0]: 10.0
num_array[1]: 11.0
num_array[2]: 12.0

short_array: [1] f32
short_array[0]: 10.0

string_array: [3] str
string_array[0]: 'string 0'
string_array[1]: 'string 1'
string_array[2]: 'string 2'


some_array: [128] Vector3

for i in some_array:
    if some_array[i].x = 1.0:
        pass
    else if some_array[i].x = 2.0:
        pass
    else:
        exit
        
        
 function get_position_of_entities: Vector3
        
        (entities: Entity)

        result: [entities] Vector3 
        
        for i in entities:
            result[i]: enitities[i].position
        
        return result       


lines: [128] Line   #array contains 128 0-initialized Lines.

line_0: lines[0]    #indexed value gets copied in memory by the compiler.

line_0.start: Vector3(1.0, 1.0, 1.0)

lines[0]: line_0    #indexed value gets overwritten with line_0's value
lines[0].id: 'Test String'




